name: Build obsidian plugin

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - '*' # Push events to matching any tag format, i.e. 1.0, 20.15.10

env:
  PLUGIN_NAME: ${{ github.repository.name }} # Change this to the name of your plugin-id folder

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.x' # You might need to adjust this value to your own version
    # get the new version number from the tag name
    - name: Get version
      id: version
      uses: dawidd6/action-get-tag@v1
    # update the manifest.json with the tag version
    - name: Update manifest version
      uses: jossef/action-set-json-field@v1
      with:
        file: manifest.json
        field: version
        value: ${{ steps.version.outputs.tag }}
    # commit the new manifest (-u because we only want to update)
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -u
        git commit -m "chore: updating manifest for version ${{ steps.version.outputs.tag }}"
    # push the commit
    - name: Push changes
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ github.token }}
    # Build the plugin
    - name: Build
      id: build
      run: |
        npm install
        npm run build --if-present
    # Package the required files into a zip
    - name: Package
      run: |
        mkdir ${{ env.PLUGIN_NAME }}
        cp main.js manifest.json styles.css README.md ${{ env.PLUGIN_NAME }}
        zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
    # Create the release on github
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ github.ref }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false
    # Upload the packaged release file
    - name: Upload zip file
      id: upload-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./${{ env.PLUGIN_NAME }}.zip 
        asset_name: ${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.tag }}.zip 
        asset_content_type: application/zip
    # Upload the main.js
    - name: Upload main.js
      id: upload-main
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./main.js
        asset_name: main.js
        asset_content_type: text/javascript
    # Upload the manifest.json
    - name: Upload manifest.json
      id: upload-manifest
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./manifest.json
        asset_name: manifest.json
        asset_content_type: application/json
    # Upload the style.css
    - name: Upload styles.css
      id: upload-css
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./styles.css
        asset_name: styles.css
        asset_content_type: text/css
    # TODO: release notes???
